trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/

parameters:
  - name: environment
    displayName: 'Selecciona un entorno'
    type: string
    default: dev
    values:
      - dev
      - stage
      - prod

variables:

  AZURE_SERVICE_CONNECTION: 'EcommerceConnection'
  TERRAFORM_BACKEND_STORAGE_ACCOUNT: 'tfstate1749162202'
  TERRAFORM_BACKEND_CONTAINER: 'tfstate'
  TERRAFORM_BACKEND_RESOURCE_GROUP: 'rg-terraform-state'


stages:
  - stage: TerraformInstall
    displayName: 'Terraform en ${{ parameters.environment }}'
    jobs:
      - job: apply
        displayName: 'Deploy ${{ parameters.environment }}'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              # These backend parameters are correct for init
              backendServiceArm: $(AZURE_SERVICE_CONNECTION)
              backendAzureRmResourceGroupName: $(TERRAFORM_BACKEND_RESOURCE_GROUP)
              backendAzureRmStorageAccountName: $(TERRAFORM_BACKEND_STORAGE_ACCOUNT)
              backendAzureRmContainerName: $(TERRAFORM_BACKEND_CONTAINER)
              backendAzureRmKey: '${{ parameters.environment }}.terraform.tfstate' # Corrected for dynamic key

          - task: TerraformTask@5
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              # This is the crucial change: Use backendServiceArm for authentication
              backendServiceArm: $(AZURE_SERVICE_CONNECTION)
              # Also, ensure you pass the -out for the plan, good practice for apply later
              commandOptions: '-out=$(Pipeline.Workspace)/${{ parameters.environment }}.tfplan'


          - task: TerraformTask@5
            displayName: 'validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              # Use backendServiceArm here too
              backendServiceArm: $(AZURE_SERVICE_CONNECTION)

          - task: TerraformTask@5
            displayName: 'apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              # Use backendServiceArm here too
              backendServiceArm: $(AZURE_SERVICE_CONNECTION)
              # Specify the plan file created in the plan step
              commandOptions: '$(Pipeline.Workspace)/${{ parameters.environment }}.tfplan'