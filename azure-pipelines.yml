trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - terraform/

parameters:
  - name: environment
    displayName: 'Selecciona un entorno'
    type: string
    default: dev
    values:
      - dev
      - stage
      - prod

variables:
  # Terraform version
  TERRAFORM_VERSION: '1.6.6'
  
  # Azure service connection (configure in Azure DevOps)
  AZURE_SERVICE_CONNECTION: 'EcommerceConnection'
  
  # Terraform state storage (update with your actual values)
  TERRAFORM_BACKEND_STORAGE_ACCOUNT: 'tfstate1749162202'
  TERRAFORM_BACKEND_CONTAINER: 'tfstate'
  TERRAFORM_BACKEND_RESOURCE_GROUP: 'rg-terraform-state'


stages:
  - stage: TerraformInstall
    displayName: 'Terraform en ${{ parameters.environment }}'
    jobs:
      - job: apply
        displayName: 'Deploy ${{ parameters.environment }}'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              backendServiceArm: $(AZURE_SERVICE_CONNECTION)
              backendAzureRmResourceGroupName: $(TERRAFORM_BACKEND_RESOURCE_GROUP)
              backendAzureRmStorageAccountName: $(TERRAFORM_BACKEND_STORAGE_ACCOUNT)
              backendAzureRmContainerName: $(TERRAFORM_BACKEND_CONTAINER)
              backendAzureRmKey: 'dev.terraform.tfstate'

          - task: TerraformTask@5
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              environmentServiceNameAzureRM: $(AZURE_SERVICE_CONNECTION)
              
          - task: TerraformTask@5
            displayName: 'validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              environmentServiceNameAzureRM: $(AZURE_SERVICE_CONNECTION)
              
          - task: TerraformTask@5
            displayName: 'apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: 'terraform/envs/${{ parameters.environment }}'
              environmentServiceNameAzureRM: $(AZURE_SERVICE_CONNECTION)