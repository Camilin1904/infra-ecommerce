trigger: none
pr: none

parameters:
  - name: environment
    displayName: 'Entorno a destruir'
    type: string
    default: 'dev'
    values:
      - dev
      - stage
      - prod
  - name: confirmDestroy
    displayName: 'Type "DESTROY" to confirm (case sensitive)'
    type: string
    default: ''

variables:
  TERRAFORM_VERSION: '1.6.6'
  AZURE_SERVICE_CONNECTION: 'ecommerce-connection-manual'
  TERRAFORM_BACKEND_STORAGE_ACCOUNT: 'tfstate1749162202'
  TERRAFORM_BACKEND_CONTAINER: 'tfstate'
  TERRAFORM_BACKEND_RESOURCE_GROUP: 'rg-terraform-state'

stages:
  - stage: Validate_Destroy_Request
    displayName: 'Validate Destroy Request'
    jobs:
      - job: Validate
        displayName: 'Validate Destroy Parameters'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              if [ "${{ parameters.confirmDestroy }}" != "DESTROY" ]; then
                echo "##vso[task.logissue type=error]Confirmation text must be exactly 'DESTROY' (case sensitive)"
                exit 1
              fi
              
              if [ "${{ parameters.environment }}" == "prod" ]; then
                echo "##vso[task.logissue type=warning]You are about to destroy the PRODUCTION environment!"
                echo "This action is irreversible and will delete all production resources."
              fi
              
              echo "Validation passed. Proceeding with destroy operation for environment: ${{ parameters.environment }}"
            displayName: 'Validate Destroy Confirmation'

  - stage: Destroy_Infrastructure
    displayName: 'Destroy ${{ parameters.environment }} Infrastructure'
    dependsOn: Validate_Destroy_Request
    condition: succeeded()
    jobs:
      - deployment: Destroy_${{ parameters.environment }}
        displayName: 'Destroy ${{ parameters.environment }} Infrastructure'
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'dev-destroy'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: 'Checkout repository'

                - task: TerraformInstaller@1
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: $(TERRAFORM_VERSION)

                - task: TerraformTask@5
                  inputs:
                    provider: 'azurerm'
                    command: 'init'
                    workingDirectory: 'terraform/envs/${{ parameters.environment }}'
                    backendServiceArm: $(AZURE_SERVICE_CONNECTION)
                    backendAzureRmResourceGroupName: $(TERRAFORM_BACKEND_RESOURCE_GROUP)
                    backendAzureRmStorageAccountName: $(TERRAFORM_BACKEND_STORAGE_ACCOUNT)
                    backendAzureRmContainerName: $(TERRAFORM_BACKEND_CONTAINER)
                    backendAzureRmKey: '${{ parameters.environment }}.terraform.tfstate'
                
                - task: TerraformTask@5
                  inputs:
                    provider: 'azurerm'
                    command: 'destroy'
                    environmentServiceNameAzureRM: 'ecommerce-connection-manual'
                    workingDirectory: 'terraform/envs/${{ parameters.environment }}'