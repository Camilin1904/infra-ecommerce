# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

# Ignore Mac DS_Store files
.DS_Store

# Ignore Windows Thumbs.db files
Thumbs.db

# Ignore temporary files
*.tmp
*.temp
*.bak
*.swp
*.swo
*~

# Ignore log files
*.log

# Ignore editor specific files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Ignore OS generated files
.Spotlight-V100
.Trashes
ehthumbs.db

# Ignore kubectl config files that might contain sensitive data
kubeconfig*

# Ignore Azure CLI cache
.azure/

# Ignore large binary files
*.zip
*.tar.gz
*.tar.bz2
*.rar
*.7z

# Ignore any local testing or development files
local/
test-output/
*.local

# Ignore certificate and key files
*.pem
*.key
*.crt
*.p12
*.pfx

# Ignore backup files
*.backup

# Ignore lock files (but keep .terraform.lock.hcl for provider version locking)
# package-lock.json
# yarn.lock

# Node modules if any Node.js tooling is used
node_modules/

# Python cache if any Python tooling is used
__pycache__/
*.py[cod]
*$py.class

# But keep example files
!*.example
!*.sample
!*template*
